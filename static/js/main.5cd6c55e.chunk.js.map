{"version":3,"sources":["Components/Jumbotron/jumbotron.js","Components/SearchBar/searchbar.js","Util/API.js","App.js","reportWebVitals.js","index.js"],"names":["Jumbotron","className","search","handleInputChange","onChange","name","list","type","placeholder","API","axios","get","App","useState","users","filteredUsers","employees","setEmployees","console","log","handleSortName","event","preventDefault","newArr","sort","a","b","first","useEffect","then","res","data","results","i","Rows","map","user","src","picture","thumbnail","alt","last","email","phone","dob","date","input","target","value","filter","foo","toLowerCase","includes","scope","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wLAceA,MAZf,WACI,OACI,qBAAKC,UAAU,4BAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,YAAd,gCACA,mBAAGA,UAAU,OAAb,0CCUDC,MAff,YAAwC,IAAtBC,EAAqB,EAArBA,kBACd,OACI,qBAAKF,UAAU,2CAAf,SAEI,uBACIG,SAAUD,EACVE,KAAK,WACLC,KAAK,YACLC,KAAK,OACLC,YAAY,c,iBCHbC,EANH,CACRP,OAAQ,WACJ,OAAOQ,IAAMC,IAAI,mFCgFVC,MA/Ef,WAEE,MAAkCC,mBAAS,CACzCC,MAAO,GACPC,cAAe,GACfb,OAAQ,KAHV,mBAAOc,EAAP,KAAkBC,EAAlB,KAKAC,QAAQC,IAAIH,EAAUF,OAEtB,IAUMM,EAAiB,SAACC,GACtBA,EAAMC,iBACN,IAAMC,EAASP,EAAUF,MAAMU,MAAK,SAAUC,EAAGC,GAC/C,OAAID,EAAEpB,KAAKsB,MAAQD,EAAErB,KAAKsB,OAAiB,EACvCF,EAAEpB,KAAKsB,MAAQD,EAAErB,KAAKsB,MAAgB,EACnC,KAETV,EAAa,2BACRD,GADO,IAEVD,cAAeQ,MAInBK,qBAAU,WACRnB,EAAIP,SACD2B,MAAK,SAACC,GACLb,EAAa,2BAAKD,GAAN,IAAiBF,MAAOgB,EAAIC,KAAKC,QAASjB,cAAee,EAAIC,KAAKC,gBAEjF,IACH,IAAIC,EAAI,EACFC,EAAOlB,EAAUD,cAAcoB,KAAI,SAACC,GAExC,OACE,+BACE,6BAAI,qBAAKC,IAAKD,EAAKE,QAAQC,UAAWC,IAAKJ,EAAK/B,KAAKsB,UACrD,6BAAKS,EAAK/B,KAAKsB,MAAQ,IAAMS,EAAK/B,KAAKoC,OACvC,6BAAKL,EAAKM,QACV,6BAAKN,EAAKO,QACV,6BAAKP,EAAKQ,IAAIC,SALPZ,QAWb,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAW9B,kBA/CW,SAACkB,GACzB,IAAMyB,EAAQzB,EAAM0B,OAAOC,MACrBzB,EAASP,EAAUF,MAAMmC,QAAO,SAACC,GACrC,OAAQA,EAAI7C,KAAKsB,MAAQ,IAAMuB,EAAI7C,KAAKoC,MAAMU,cAAcC,SAASN,EAAMK,kBAE7ElC,EAAa,2BACRD,GADO,IAEVD,cAAeQ,QAyCf,qBAAKtB,UAAU,MAAf,SACE,wBAAOA,UAAU,iCAAjB,UACE,gCACE,+BACE,oBAAIoD,MAAM,MAAV,oBACA,qBAAIA,MAAM,MAAV,iBAAoB,wBAAQ9C,KAAK,SAASN,UAAU,uBAAuBqD,QAASlC,EAAhE,6BACpB,qBAAIiC,MAAM,MAAV,kBAAqB,wBAAQ9C,KAAK,SAASN,UAAU,uBAAuBqD,QAASlC,EAAhE,6BACrB,oBAAIiC,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,sBAGJ,gCACGnB,aC9DEqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAMjDX,M","file":"static/js/main.5cd6c55e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Employee Directory</h1>\r\n                <p className=\"lead\">Its a Jumbotron Yeah !</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\nfunction search({ handleInputChange }) {\r\n    return (\r\n        <div className=\"form-group d-flex justify-content-center\">\r\n\r\n            <input\r\n                onChange={handleInputChange}\r\n                name=\"Employee\"\r\n                list=\"Employees\"\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default search;\r\n","import axios from \"axios\";\r\n\r\nconst API = {\r\n    search: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=20&inc=picture,name,phone,email,dob&nat=us\");\r\n    },\r\n}\r\n\r\nexport default API;","import React, { useState, useEffect } from \"react\";\nimport Jumbotron from \"./Components/Jumbotron/jumbotron\";\nimport SearchBar from \"./Components/SearchBar/searchbar\";\nimport API from \"./Util/API\";\n\nfunction App() {\n\n  const [employees, setEmployees] = useState({\n    users: [],\n    filteredUsers: [],\n    search: \"\",\n  });\n  console.log(employees.users);\n\n  const handleInputChange = (event) => {\n    const input = event.target.value;\n    const newArr = employees.users.filter((foo) => {\n      return (foo.name.first + \" \" + foo.name.last).toLowerCase().includes(input.toLowerCase());\n    })\n    setEmployees({\n      ...employees,\n      filteredUsers: newArr,\n    })\n  }\n  const handleSortName = (event) => {\n    event.preventDefault();\n    const newArr = employees.users.sort(function (a, b) {\n      if (a.name.first < b.name.first) { return -1; }\n      if (a.name.first > b.name.first) { return 1; }\n      return 0;\n    })\n    setEmployees({\n      ...employees,\n      filteredUsers: newArr,\n    })\n  }\n\n  useEffect(() => {\n    API.search()\n      .then((res) => {\n        setEmployees({ ...employees, users: res.data.results, filteredUsers: res.data.results });\n      });\n  }, []);\n  let i = 0;\n  const Rows = employees.filteredUsers.map((user) => {\n\n    return (\n      <tr key={i++}>\n        <td><img src={user.picture.thumbnail} alt={user.name.first}></img></td>\n        <td>{user.name.first + \" \" + user.name.last}</td>\n        <td>{user.email}</td>\n        <td>{user.phone}</td>\n        <td>{user.dob.date}</td>\n      </tr>\n    );\n\n  });\n\n  return (\n    <div>\n      <Jumbotron />\n      <SearchBar handleInputChange={handleInputChange} />\n      <div className=\"p-5\">\n        <table className=\"table table-striped table-dark\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Image </th>\n              <th scope=\"col\">Name<button type=\"button\" className=\"btn btn-link p-0 m-0\" onClick={handleSortName}>ðŸ§°</button></th>\n              <th scope=\"col\">Email<button type=\"button\" className=\"btn btn-link p-0 m-0\" onClick={handleSortName}>ðŸ§°</button></th>\n              <th scope=\"col\">Phone</th>\n              <th scope=\"col\">DOB</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Rows}\n          </tbody>\n        </table>\n      </div>\n\n    </div>\n\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}